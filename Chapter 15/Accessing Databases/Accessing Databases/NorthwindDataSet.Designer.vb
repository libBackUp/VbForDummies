'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50215.44
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("NorthwindDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet"),  _
 System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly")>  _
Partial Public Class NorthwindDataSet
    Inherits System.Data.DataSet
    
    Private tableCustomerCustomerDemo As CustomerCustomerDemoDataTable
    
    Private tableCustomerDemographics As CustomerDemographicsDataTable
    
    Private tableCustomers As CustomersDataTable
    
    Private relationFK_CustomerCustomerDemo As System.Data.DataRelation
    
    Private relationFK_CustomerCustomerDemo_Customers As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CustomerCustomerDemo")) Is Nothing) Then
                MyBase.Tables.Add(New CustomerCustomerDemoDataTable(ds.Tables("CustomerCustomerDemo")))
            End If
            If (Not (ds.Tables("CustomerDemographics")) Is Nothing) Then
                MyBase.Tables.Add(New CustomerDemographicsDataTable(ds.Tables("CustomerDemographics")))
            End If
            If (Not (ds.Tables("Customers")) Is Nothing) Then
                MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustomerCustomerDemo() As CustomerCustomerDemoDataTable
        Get
            Return Me.tableCustomerCustomerDemo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustomerDemographics() As CustomerDemographicsDataTable
        Get
            Return Me.tableCustomerDemographics
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Customers() As CustomersDataTable
        Get
            Return Me.tableCustomers
        End Get
    End Property
    
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.ComponentModel.DefaultValueAttribute(true)>  _
    Public Shadows Property EnforceConstraints() As Boolean
        Get
            Return MyBase.EnforceConstraints
        End Get
        Set
            MyBase.EnforceConstraints = value
        End Set
    End Property
    
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As NorthwindDataSet = CType(MyBase.Clone,NorthwindDataSet)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("CustomerCustomerDemo")) Is Nothing) Then
                MyBase.Tables.Add(New CustomerCustomerDemoDataTable(ds.Tables("CustomerCustomerDemo")))
            End If
            If (Not (ds.Tables("CustomerDemographics")) Is Nothing) Then
                MyBase.Tables.Add(New CustomerDemographicsDataTable(ds.Tables("CustomerDemographics")))
            End If
            If (Not (ds.Tables("Customers")) Is Nothing) Then
                MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCustomerCustomerDemo = CType(MyBase.Tables("CustomerCustomerDemo"),CustomerCustomerDemoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustomerCustomerDemo) Is Nothing) Then
                Me.tableCustomerCustomerDemo.InitVars
            End If
        End If
        Me.tableCustomerDemographics = CType(MyBase.Tables("CustomerDemographics"),CustomerDemographicsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustomerDemographics) Is Nothing) Then
                Me.tableCustomerDemographics.InitVars
            End If
        End If
        Me.tableCustomers = CType(MyBase.Tables("Customers"),CustomersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustomers) Is Nothing) Then
                Me.tableCustomers.InitVars
            End If
        End If
        Me.relationFK_CustomerCustomerDemo = Me.Relations("FK_CustomerCustomerDemo")
        Me.relationFK_CustomerCustomerDemo_Customers = Me.Relations("FK_CustomerCustomerDemo_Customers")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "NorthwindDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/NorthwindDataSet.xsd"
        Me.EnforceConstraints = true
        Me.tableCustomerCustomerDemo = New CustomerCustomerDemoDataTable
        MyBase.Tables.Add(Me.tableCustomerCustomerDemo)
        Me.tableCustomerDemographics = New CustomerDemographicsDataTable
        MyBase.Tables.Add(Me.tableCustomerDemographics)
        Me.tableCustomers = New CustomersDataTable
        MyBase.Tables.Add(Me.tableCustomers)
        Me.relationFK_CustomerCustomerDemo = New System.Data.DataRelation("FK_CustomerCustomerDemo", New System.Data.DataColumn() {Me.tableCustomerDemographics.CustomerTypeIDColumn}, New System.Data.DataColumn() {Me.tableCustomerCustomerDemo.CustomerTypeIDColumn}, false)
        Me.Relations.Add(Me.relationFK_CustomerCustomerDemo)
        Me.relationFK_CustomerCustomerDemo_Customers = New System.Data.DataRelation("FK_CustomerCustomerDemo_Customers", New System.Data.DataColumn() {Me.tableCustomers.CustomerIDColumn}, New System.Data.DataColumn() {Me.tableCustomerCustomerDemo.CustomerIDColumn}, false)
        Me.Relations.Add(Me.relationFK_CustomerCustomerDemo_Customers)
    End Sub
    
    Private Function ShouldSerializeCustomerCustomerDemo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCustomerDemographics() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCustomers() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As NorthwindDataSet = New NorthwindDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub CustomerCustomerDemoRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomerCustomerDemoRowChangeEvent)
    
    Public Delegate Sub CustomerDemographicsRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomerDemographicsRowChangeEvent)
    
    Public Delegate Sub CustomersRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomersRowChangeEvent)
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CustomerCustomerDemoDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerID As System.Data.DataColumn
        
        Private columnCustomerTypeID As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "CustomerCustomerDemo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property CustomerIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Public ReadOnly Property CustomerTypeIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCustomerTypeID
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomerCustomerDemoRow
            Get
                Return CType(Me.Rows(index),CustomerCustomerDemoRow)
            End Get
        End Property
        
        Public Event CustomerCustomerDemoRowChanged As CustomerCustomerDemoRowChangeEventHandler
        
        Public Event CustomerCustomerDemoRowChanging As CustomerCustomerDemoRowChangeEventHandler
        
        Public Event CustomerCustomerDemoRowDeleted As CustomerCustomerDemoRowChangeEventHandler
        
        Public Event CustomerCustomerDemoRowDeleting As CustomerCustomerDemoRowChangeEventHandler
        
        Public Overloads Sub AddCustomerCustomerDemoRow(ByVal row As CustomerCustomerDemoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCustomerCustomerDemoRow(ByVal parentCustomersRowByFK_CustomerCustomerDemo_Customers As CustomersRow, ByVal parentCustomerDemographicsRowByFK_CustomerCustomerDemo As CustomerDemographicsRow) As CustomerCustomerDemoRow
            Dim rowCustomerCustomerDemoRow As CustomerCustomerDemoRow = CType(Me.NewRow,CustomerCustomerDemoRow)
            rowCustomerCustomerDemoRow.ItemArray = New Object() {parentCustomersRowByFK_CustomerCustomerDemo_Customers(0), parentCustomerDemographicsRowByFK_CustomerCustomerDemo(0)}
            Me.Rows.Add(rowCustomerCustomerDemoRow)
            Return rowCustomerCustomerDemoRow
        End Function
        
        Public Function FindByCustomerIDCustomerTypeID(ByVal CustomerID As String, ByVal CustomerTypeID As String) As CustomerCustomerDemoRow
            Return CType(Me.Rows.Find(New Object() {CustomerID, CustomerTypeID}),CustomerCustomerDemoRow)
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CustomerCustomerDemoDataTable = CType(MyBase.Clone,CustomerCustomerDemoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CustomerCustomerDemoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomerID = MyBase.Columns("CustomerID")
            Me.columnCustomerTypeID = MyBase.Columns("CustomerTypeID")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomerID = New System.Data.DataColumn("CustomerID", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerID)
            Me.columnCustomerTypeID = New System.Data.DataColumn("CustomerTypeID", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerTypeID)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCustomerID, Me.columnCustomerTypeID}, true))
            Me.columnCustomerID.AllowDBNull = false
            Me.columnCustomerID.MaxLength = 5
            Me.columnCustomerTypeID.AllowDBNull = false
            Me.columnCustomerTypeID.MaxLength = 10
        End Sub
        
        Public Function NewCustomerCustomerDemoRow() As CustomerCustomerDemoRow
            Return CType(Me.NewRow,CustomerCustomerDemoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CustomerCustomerDemoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CustomerCustomerDemoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomerCustomerDemoRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomerCustomerDemoRowChanged(Me, New CustomerCustomerDemoRowChangeEvent(CType(e.Row,CustomerCustomerDemoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomerCustomerDemoRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomerCustomerDemoRowChanging(Me, New CustomerCustomerDemoRowChangeEvent(CType(e.Row,CustomerCustomerDemoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomerCustomerDemoRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomerCustomerDemoRowDeleted(Me, New CustomerCustomerDemoRowChangeEvent(CType(e.Row,CustomerCustomerDemoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomerCustomerDemoRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomerCustomerDemoRowDeleting(Me, New CustomerCustomerDemoRowChangeEvent(CType(e.Row,CustomerCustomerDemoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCustomerCustomerDemoRow(ByVal row As CustomerCustomerDemoRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As NorthwindDataSet = New NorthwindDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CustomerCustomerDemoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CustomerDemographicsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerTypeID As System.Data.DataColumn
        
        Private columnCustomerDesc As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "CustomerDemographics"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property CustomerTypeIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCustomerTypeID
            End Get
        End Property
        
        Public ReadOnly Property CustomerDescColumn() As System.Data.DataColumn
            Get
                Return Me.columnCustomerDesc
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomerDemographicsRow
            Get
                Return CType(Me.Rows(index),CustomerDemographicsRow)
            End Get
        End Property
        
        Public Event CustomerDemographicsRowChanged As CustomerDemographicsRowChangeEventHandler
        
        Public Event CustomerDemographicsRowChanging As CustomerDemographicsRowChangeEventHandler
        
        Public Event CustomerDemographicsRowDeleted As CustomerDemographicsRowChangeEventHandler
        
        Public Event CustomerDemographicsRowDeleting As CustomerDemographicsRowChangeEventHandler
        
        Public Overloads Sub AddCustomerDemographicsRow(ByVal row As CustomerDemographicsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCustomerDemographicsRow(ByVal CustomerTypeID As String, ByVal CustomerDesc As String) As CustomerDemographicsRow
            Dim rowCustomerDemographicsRow As CustomerDemographicsRow = CType(Me.NewRow,CustomerDemographicsRow)
            rowCustomerDemographicsRow.ItemArray = New Object() {CustomerTypeID, CustomerDesc}
            Me.Rows.Add(rowCustomerDemographicsRow)
            Return rowCustomerDemographicsRow
        End Function
        
        Public Function FindByCustomerTypeID(ByVal CustomerTypeID As String) As CustomerDemographicsRow
            Return CType(Me.Rows.Find(New Object() {CustomerTypeID}),CustomerDemographicsRow)
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CustomerDemographicsDataTable = CType(MyBase.Clone,CustomerDemographicsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CustomerDemographicsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomerTypeID = MyBase.Columns("CustomerTypeID")
            Me.columnCustomerDesc = MyBase.Columns("CustomerDesc")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomerTypeID = New System.Data.DataColumn("CustomerTypeID", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerTypeID)
            Me.columnCustomerDesc = New System.Data.DataColumn("CustomerDesc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerDesc)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCustomerTypeID}, true))
            Me.columnCustomerTypeID.AllowDBNull = false
            Me.columnCustomerTypeID.Unique = true
            Me.columnCustomerTypeID.MaxLength = 10
            Me.columnCustomerDesc.MaxLength = 1073741823
        End Sub
        
        Public Function NewCustomerDemographicsRow() As CustomerDemographicsRow
            Return CType(Me.NewRow,CustomerDemographicsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CustomerDemographicsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CustomerDemographicsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomerDemographicsRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomerDemographicsRowChanged(Me, New CustomerDemographicsRowChangeEvent(CType(e.Row,CustomerDemographicsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomerDemographicsRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomerDemographicsRowChanging(Me, New CustomerDemographicsRowChangeEvent(CType(e.Row,CustomerDemographicsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomerDemographicsRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomerDemographicsRowDeleted(Me, New CustomerDemographicsRowChangeEvent(CType(e.Row,CustomerDemographicsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomerDemographicsRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomerDemographicsRowDeleting(Me, New CustomerDemographicsRowChangeEvent(CType(e.Row,CustomerDemographicsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCustomerDemographicsRow(ByVal row As CustomerDemographicsRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As NorthwindDataSet = New NorthwindDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CustomerDemographicsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CustomersDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerID As System.Data.DataColumn
        
        Private columnCompanyName As System.Data.DataColumn
        
        Private columnContactName As System.Data.DataColumn
        
        Private columnContactTitle As System.Data.DataColumn
        
        Private columnAddress As System.Data.DataColumn
        
        Private columnCity As System.Data.DataColumn
        
        Private columnRegion As System.Data.DataColumn
        
        Private columnPostalCode As System.Data.DataColumn
        
        Private columnCountry As System.Data.DataColumn
        
        Private columnPhone As System.Data.DataColumn
        
        Private columnFax As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Customers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property CustomerIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Public ReadOnly Property CompanyNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnCompanyName
            End Get
        End Property
        
        Public ReadOnly Property ContactNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnContactName
            End Get
        End Property
        
        Public ReadOnly Property ContactTitleColumn() As System.Data.DataColumn
            Get
                Return Me.columnContactTitle
            End Get
        End Property
        
        Public ReadOnly Property AddressColumn() As System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        Public ReadOnly Property CityColumn() As System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        Public ReadOnly Property RegionColumn() As System.Data.DataColumn
            Get
                Return Me.columnRegion
            End Get
        End Property
        
        Public ReadOnly Property PostalCodeColumn() As System.Data.DataColumn
            Get
                Return Me.columnPostalCode
            End Get
        End Property
        
        Public ReadOnly Property CountryColumn() As System.Data.DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        Public ReadOnly Property PhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        Public ReadOnly Property FaxColumn() As System.Data.DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomersRow
            Get
                Return CType(Me.Rows(index),CustomersRow)
            End Get
        End Property
        
        Public Event CustomersRowChanged As CustomersRowChangeEventHandler
        
        Public Event CustomersRowChanging As CustomersRowChangeEventHandler
        
        Public Event CustomersRowDeleted As CustomersRowChangeEventHandler
        
        Public Event CustomersRowDeleting As CustomersRowChangeEventHandler
        
        Public Overloads Sub AddCustomersRow(ByVal row As CustomersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCustomersRow(ByVal CustomerID As String, ByVal CompanyName As String, ByVal ContactName As String, ByVal ContactTitle As String, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal Phone As String, ByVal Fax As String) As CustomersRow
            Dim rowCustomersRow As CustomersRow = CType(Me.NewRow,CustomersRow)
            rowCustomersRow.ItemArray = New Object() {CustomerID, CompanyName, ContactName, ContactTitle, Address, City, Region, PostalCode, Country, Phone, Fax}
            Me.Rows.Add(rowCustomersRow)
            Return rowCustomersRow
        End Function
        
        Public Function FindByCustomerID(ByVal CustomerID As String) As CustomersRow
            Return CType(Me.Rows.Find(New Object() {CustomerID}),CustomersRow)
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CustomersDataTable = CType(MyBase.Clone,CustomersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CustomersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomerID = MyBase.Columns("CustomerID")
            Me.columnCompanyName = MyBase.Columns("CompanyName")
            Me.columnContactName = MyBase.Columns("ContactName")
            Me.columnContactTitle = MyBase.Columns("ContactTitle")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnRegion = MyBase.Columns("Region")
            Me.columnPostalCode = MyBase.Columns("PostalCode")
            Me.columnCountry = MyBase.Columns("Country")
            Me.columnPhone = MyBase.Columns("Phone")
            Me.columnFax = MyBase.Columns("Fax")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomerID = New System.Data.DataColumn("CustomerID", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerID)
            Me.columnCompanyName = New System.Data.DataColumn("CompanyName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyName)
            Me.columnContactName = New System.Data.DataColumn("ContactName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactName)
            Me.columnContactTitle = New System.Data.DataColumn("ContactTitle", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactTitle)
            Me.columnAddress = New System.Data.DataColumn("Address", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New System.Data.DataColumn("City", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnRegion = New System.Data.DataColumn("Region", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegion)
            Me.columnPostalCode = New System.Data.DataColumn("PostalCode", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostalCode)
            Me.columnCountry = New System.Data.DataColumn("Country", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountry)
            Me.columnPhone = New System.Data.DataColumn("Phone", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone)
            Me.columnFax = New System.Data.DataColumn("Fax", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFax)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCustomerID}, true))
            Me.columnCustomerID.AllowDBNull = false
            Me.columnCustomerID.Unique = true
            Me.columnCustomerID.MaxLength = 5
            Me.columnCompanyName.AllowDBNull = false
            Me.columnCompanyName.MaxLength = 40
            Me.columnContactName.MaxLength = 30
            Me.columnContactTitle.MaxLength = 30
            Me.columnAddress.MaxLength = 60
            Me.columnCity.MaxLength = 15
            Me.columnRegion.MaxLength = 15
            Me.columnPostalCode.MaxLength = 10
            Me.columnCountry.MaxLength = 15
            Me.columnPhone.MaxLength = 24
            Me.columnFax.MaxLength = 24
        End Sub
        
        Public Function NewCustomersRow() As CustomersRow
            Return CType(Me.NewRow,CustomersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CustomersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CustomersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomersRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomersRowChanged(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomersRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomersRowChanging(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomersRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomersRowDeleted(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomersRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomersRowDeleting(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCustomersRow(ByVal row As CustomersRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As NorthwindDataSet = New NorthwindDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CustomersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    Partial Public Class CustomerCustomerDemoRow
        Inherits System.Data.DataRow
        
        Private tableCustomerCustomerDemo As CustomerCustomerDemoDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomerCustomerDemo = CType(Me.Table,CustomerCustomerDemoDataTable)
        End Sub
        
        Public Property CustomerID() As String
            Get
                Return CType(Me(Me.tableCustomerCustomerDemo.CustomerIDColumn),String)
            End Get
            Set
                Me(Me.tableCustomerCustomerDemo.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property CustomerTypeID() As String
            Get
                Return CType(Me(Me.tableCustomerCustomerDemo.CustomerTypeIDColumn),String)
            End Get
            Set
                Me(Me.tableCustomerCustomerDemo.CustomerTypeIDColumn) = value
            End Set
        End Property
        
        Public Property CustomerDemographicsRow() As CustomerDemographicsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CustomerCustomerDemo")),CustomerDemographicsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CustomerCustomerDemo"))
            End Set
        End Property
        
        Public Property CustomersRow() As CustomersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CustomerCustomerDemo_Customers")),CustomersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CustomerCustomerDemo_Customers"))
            End Set
        End Property
    End Class
    
    Partial Public Class CustomerDemographicsRow
        Inherits System.Data.DataRow
        
        Private tableCustomerDemographics As CustomerDemographicsDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomerDemographics = CType(Me.Table,CustomerDemographicsDataTable)
        End Sub
        
        Public Property CustomerTypeID() As String
            Get
                Return CType(Me(Me.tableCustomerDemographics.CustomerTypeIDColumn),String)
            End Get
            Set
                Me(Me.tableCustomerDemographics.CustomerTypeIDColumn) = value
            End Set
        End Property
        
        Public Property CustomerDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerDemographics.CustomerDescColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CustomerDesc' in table 'CustomerDemographics' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerDemographics.CustomerDescColumn) = value
            End Set
        End Property
        
        Public Function IsCustomerDescNull() As Boolean
            Return Me.IsNull(Me.tableCustomerDemographics.CustomerDescColumn)
        End Function
        
        Public Sub SetCustomerDescNull()
            Me(Me.tableCustomerDemographics.CustomerDescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetCustomerCustomerDemoRows() As CustomerCustomerDemoRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CustomerCustomerDemo")),CustomerCustomerDemoRow())
        End Function
    End Class
    
    Partial Public Class CustomersRow
        Inherits System.Data.DataRow
        
        Private tableCustomers As CustomersDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomers = CType(Me.Table,CustomersDataTable)
        End Sub
        
        Public Property CustomerID() As String
            Get
                Return CType(Me(Me.tableCustomers.CustomerIDColumn),String)
            End Get
            Set
                Me(Me.tableCustomers.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property CompanyName() As String
            Get
                Return CType(Me(Me.tableCustomers.CompanyNameColumn),String)
            End Get
            Set
                Me(Me.tableCustomers.CompanyNameColumn) = value
            End Set
        End Property
        
        Public Property ContactName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomers.ContactNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ContactName' in table 'Customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomers.ContactNameColumn) = value
            End Set
        End Property
        
        Public Property ContactTitle() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomers.ContactTitleColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ContactTitle' in table 'Customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomers.ContactTitleColumn) = value
            End Set
        End Property
        
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomers.AddressColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Address' in table 'Customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomers.AddressColumn) = value
            End Set
        End Property
        
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomers.CityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'City' in table 'Customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomers.CityColumn) = value
            End Set
        End Property
        
        Public Property Region() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomers.RegionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Region' in table 'Customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomers.RegionColumn) = value
            End Set
        End Property
        
        Public Property PostalCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomers.PostalCodeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'PostalCode' in table 'Customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomers.PostalCodeColumn) = value
            End Set
        End Property
        
        Public Property Country() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomers.CountryColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Country' in table 'Customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomers.CountryColumn) = value
            End Set
        End Property
        
        Public Property Phone() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomers.PhoneColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Phone' in table 'Customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomers.PhoneColumn) = value
            End Set
        End Property
        
        Public Property Fax() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomers.FaxColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Fax' in table 'Customers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomers.FaxColumn) = value
            End Set
        End Property
        
        Public Function IsContactNameNull() As Boolean
            Return Me.IsNull(Me.tableCustomers.ContactNameColumn)
        End Function
        
        Public Sub SetContactNameNull()
            Me(Me.tableCustomers.ContactNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContactTitleNull() As Boolean
            Return Me.IsNull(Me.tableCustomers.ContactTitleColumn)
        End Function
        
        Public Sub SetContactTitleNull()
            Me(Me.tableCustomers.ContactTitleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableCustomers.AddressColumn)
        End Function
        
        Public Sub SetAddressNull()
            Me(Me.tableCustomers.AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableCustomers.CityColumn)
        End Function
        
        Public Sub SetCityNull()
            Me(Me.tableCustomers.CityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegionNull() As Boolean
            Return Me.IsNull(Me.tableCustomers.RegionColumn)
        End Function
        
        Public Sub SetRegionNull()
            Me(Me.tableCustomers.RegionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPostalCodeNull() As Boolean
            Return Me.IsNull(Me.tableCustomers.PostalCodeColumn)
        End Function
        
        Public Sub SetPostalCodeNull()
            Me(Me.tableCustomers.PostalCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCountryNull() As Boolean
            Return Me.IsNull(Me.tableCustomers.CountryColumn)
        End Function
        
        Public Sub SetCountryNull()
            Me(Me.tableCustomers.CountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhoneNull() As Boolean
            Return Me.IsNull(Me.tableCustomers.PhoneColumn)
        End Function
        
        Public Sub SetPhoneNull()
            Me(Me.tableCustomers.PhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.tableCustomers.FaxColumn)
        End Function
        
        Public Sub SetFaxNull()
            Me(Me.tableCustomers.FaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetCustomerCustomerDemoRows() As CustomerCustomerDemoRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CustomerCustomerDemo_Customers")),CustomerCustomerDemoRow())
        End Function
    End Class
    
    Public Class CustomerCustomerDemoRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CustomerCustomerDemoRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As CustomerCustomerDemoRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As CustomerCustomerDemoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class CustomerDemographicsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CustomerDemographicsRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As CustomerDemographicsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As CustomerDemographicsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class CustomersRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CustomersRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As CustomersRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As CustomersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace NorthwindDataSetTableAdapters
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CustomerCustomerDemoTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents m_adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private m_connection As System.Data.SqlClient.SqlConnection
        
        Private m_commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private m_clearBeforeFill As Boolean
        
        Public Sub New()
            MyBase.New
            Me.m_clearBeforeFill = true
        End Sub
        
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me.m_adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me.m_adapter
            End Get
        End Property
        
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me.m_connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me.m_connection
            End Get
            Set
                Me.m_connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me.m_commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me.m_commandCollection
            End Get
        End Property
        
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me.m_clearBeforeFill
            End Get
            Set
                Me.m_clearBeforeFill = value
            End Set
        End Property
        
        Private Sub InitAdapter()
            Me.m_adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CustomerCustomerDemo"
            tableMapping.ColumnMappings.Add("CustomerID", "CustomerID")
            tableMapping.ColumnMappings.Add("CustomerTypeID", "CustomerTypeID")
            Me.m_adapter.TableMappings.Add(tableMapping)
            Me.m_adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me.m_adapter.DeleteCommand.Connection = Me.Connection
            Me.m_adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CustomerCustomerDemo] WHERE (([CustomerID] = @Original_Custome"& _ 
                "rID) AND ([CustomerTypeID] = @Original_CustomerTypeID))"
            Me.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CustomerTypeID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerTypeID", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me.m_adapter.InsertCommand.Connection = Me.Connection
            Me.m_adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CustomerCustomerDemo] ([CustomerID], [CustomerTypeID]) VALUES "& _ 
                "(@CustomerID, @CustomerTypeID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CustomerID, CustomerTypeID FROM Customer"& _ 
                "CustomerDemo WHERE (CustomerID = @CustomerID) AND (CustomerTypeID = @CustomerTyp"& _ 
                "eID)"
            Me.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CustomerTypeID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerTypeID", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me.m_adapter.UpdateCommand.Connection = Me.Connection
            Me.m_adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CustomerCustomerDemo] SET [CustomerID] = @CustomerID, [CustomerType"& _ 
                "ID] = @CustomerTypeID WHERE (([CustomerID] = @Original_CustomerID) AND ([Custome"& _ 
                "rTypeID] = @Original_CustomerTypeID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CustomerID, CustomerTypeID FROM C"& _ 
                "ustomerCustomerDemo WHERE (CustomerID = @CustomerID) AND (CustomerTypeID = @Cust"& _ 
                "omerTypeID)"
            Me.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CustomerTypeID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerTypeID", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CustomerTypeID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerTypeID", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        Private Sub InitConnection()
            Me.m_connection = New System.Data.SqlClient.SqlConnection
            Me.m_connection.ConnectionString = Accessing_Databases.Settings.Default.NorthwindConnectionString
        End Sub
        
        Private Sub InitCommandCollection()
            Me.m_commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me.m_commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me.m_commandCollection(0).Connection = Me.Connection
            Me.m_commandCollection(0).CommandText = "SELECT CustomerID, CustomerTypeID FROM dbo.CustomerCustomerDemo"
            Me.m_commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As NorthwindDataSet.CustomerCustomerDemoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.m_clearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As NorthwindDataSet.CustomerCustomerDemoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As NorthwindDataSet.CustomerCustomerDemoDataTable = New NorthwindDataSet.CustomerCustomerDemoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataTable As NorthwindDataSet.CustomerCustomerDemoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataSet As NorthwindDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CustomerCustomerDemo")
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CustomerID As String, ByVal Original_CustomerTypeID As String) As Integer
            If (Original_CustomerID Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CustomerID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CustomerID,String)
            End If
            If (Original_CustomerTypeID Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CustomerTypeID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CustomerTypeID,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            Me.Adapter.DeleteCommand.Connection.Open
            Try 
                Return Me.Adapter.DeleteCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CustomerID As String, ByVal CustomerTypeID As String) As Integer
            If (CustomerID Is Nothing) Then
                Throw New System.ArgumentNullException("CustomerID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CustomerID,String)
            End If
            If (CustomerTypeID Is Nothing) Then
                Throw New System.ArgumentNullException("CustomerTypeID")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CustomerTypeID,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            Me.Adapter.InsertCommand.Connection.Open
            Try 
                Return Me.Adapter.InsertCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CustomerID As String, ByVal CustomerTypeID As String, ByVal Original_CustomerID As String, ByVal Original_CustomerTypeID As String) As Integer
            If (CustomerID Is Nothing) Then
                Throw New System.ArgumentNullException("CustomerID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CustomerID,String)
            End If
            If (CustomerTypeID Is Nothing) Then
                Throw New System.ArgumentNullException("CustomerTypeID")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CustomerTypeID,String)
            End If
            If (Original_CustomerID Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CustomerID")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_CustomerID,String)
            End If
            If (Original_CustomerTypeID Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CustomerTypeID")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_CustomerTypeID,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            Me.Adapter.UpdateCommand.Connection.Open
            Try 
                Return Me.Adapter.UpdateCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CustomerDemographicsTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents m_adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private m_connection As System.Data.SqlClient.SqlConnection
        
        Private m_commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private m_clearBeforeFill As Boolean
        
        Public Sub New()
            MyBase.New
            Me.m_clearBeforeFill = true
        End Sub
        
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me.m_adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me.m_adapter
            End Get
        End Property
        
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me.m_connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me.m_connection
            End Get
            Set
                Me.m_connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me.m_commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me.m_commandCollection
            End Get
        End Property
        
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me.m_clearBeforeFill
            End Get
            Set
                Me.m_clearBeforeFill = value
            End Set
        End Property
        
        Private Sub InitAdapter()
            Me.m_adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CustomerDemographics"
            tableMapping.ColumnMappings.Add("CustomerTypeID", "CustomerTypeID")
            tableMapping.ColumnMappings.Add("CustomerDesc", "CustomerDesc")
            Me.m_adapter.TableMappings.Add(tableMapping)
            Me.m_adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me.m_adapter.DeleteCommand.Connection = Me.Connection
            Me.m_adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CustomerDemographics] WHERE (([CustomerTypeID] = @Original_Cus"& _ 
                "tomerTypeID))"
            Me.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CustomerTypeID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerTypeID", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me.m_adapter.InsertCommand.Connection = Me.Connection
            Me.m_adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CustomerDemographics] ([CustomerTypeID], [CustomerDesc]) VALUE"& _ 
                "S (@CustomerTypeID, @CustomerDesc);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CustomerTypeID, CustomerDesc FROM Cu"& _ 
                "stomerDemographics WHERE (CustomerTypeID = @CustomerTypeID)"
            Me.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CustomerTypeID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerTypeID", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CustomerDesc", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerDesc", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me.m_adapter.UpdateCommand.Connection = Me.Connection
            Me.m_adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CustomerDemographics] SET [CustomerTypeID] = @CustomerTypeID, [Cust"& _ 
                "omerDesc] = @CustomerDesc WHERE (([CustomerTypeID] = @Original_CustomerTypeID));"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CustomerTypeID, CustomerDesc FROM CustomerDemographics WHERE (CustomerT"& _ 
                "ypeID = @CustomerTypeID)"
            Me.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CustomerTypeID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerTypeID", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CustomerDesc", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerDesc", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CustomerTypeID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerTypeID", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        Private Sub InitConnection()
            Me.m_connection = New System.Data.SqlClient.SqlConnection
            Me.m_connection.ConnectionString = Accessing_Databases.Settings.Default.NorthwindConnectionString
        End Sub
        
        Private Sub InitCommandCollection()
            Me.m_commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me.m_commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me.m_commandCollection(0).Connection = Me.Connection
            Me.m_commandCollection(0).CommandText = "SELECT CustomerTypeID, CustomerDesc FROM dbo.CustomerDemographics"
            Me.m_commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As NorthwindDataSet.CustomerDemographicsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.m_clearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As NorthwindDataSet.CustomerDemographicsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As NorthwindDataSet.CustomerDemographicsDataTable = New NorthwindDataSet.CustomerDemographicsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataTable As NorthwindDataSet.CustomerDemographicsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataSet As NorthwindDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CustomerDemographics")
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CustomerTypeID As String) As Integer
            If (Original_CustomerTypeID Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CustomerTypeID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CustomerTypeID,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            Me.Adapter.DeleteCommand.Connection.Open
            Try 
                Return Me.Adapter.DeleteCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CustomerTypeID As String, ByVal CustomerDesc As String) As Integer
            If (CustomerTypeID Is Nothing) Then
                Throw New System.ArgumentNullException("CustomerTypeID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CustomerTypeID,String)
            End If
            If (CustomerDesc Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CustomerDesc,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            Me.Adapter.InsertCommand.Connection.Open
            Try 
                Return Me.Adapter.InsertCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CustomerTypeID As String, ByVal CustomerDesc As String, ByVal Original_CustomerTypeID As String) As Integer
            If (CustomerTypeID Is Nothing) Then
                Throw New System.ArgumentNullException("CustomerTypeID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CustomerTypeID,String)
            End If
            If (CustomerDesc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CustomerDesc,String)
            End If
            If (Original_CustomerTypeID Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CustomerTypeID")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_CustomerTypeID,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            Me.Adapter.UpdateCommand.Connection.Open
            Try 
                Return Me.Adapter.UpdateCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CustomersTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents m_adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private m_connection As System.Data.SqlClient.SqlConnection
        
        Private m_commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private m_clearBeforeFill As Boolean
        
        Public Sub New()
            MyBase.New
            Me.m_clearBeforeFill = true
        End Sub
        
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me.m_adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me.m_adapter
            End Get
        End Property
        
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me.m_connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me.m_connection
            End Get
            Set
                Me.m_connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me.m_commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me.m_commandCollection
            End Get
        End Property
        
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me.m_clearBeforeFill
            End Get
            Set
                Me.m_clearBeforeFill = value
            End Set
        End Property
        
        Private Sub InitAdapter()
            Me.m_adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Customers"
            tableMapping.ColumnMappings.Add("CustomerID", "CustomerID")
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName")
            tableMapping.ColumnMappings.Add("ContactName", "ContactName")
            tableMapping.ColumnMappings.Add("ContactTitle", "ContactTitle")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("Region", "Region")
            tableMapping.ColumnMappings.Add("PostalCode", "PostalCode")
            tableMapping.ColumnMappings.Add("Country", "Country")
            tableMapping.ColumnMappings.Add("Phone", "Phone")
            tableMapping.ColumnMappings.Add("Fax", "Fax")
            Me.m_adapter.TableMappings.Add(tableMapping)
            Me.m_adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me.m_adapter.DeleteCommand.Connection = Me.Connection
            Me.m_adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Customers] WHERE (([CustomerID] = @Original_CustomerID) AND (["& _ 
                "CompanyName] = @Original_CompanyName) AND ((@IsNull_ContactName = 1 AND [Contact"& _ 
                "Name] IS NULL) OR ([ContactName] = @Original_ContactName)) AND ((@IsNull_Contact"& _ 
                "Title = 1 AND [ContactTitle] IS NULL) OR ([ContactTitle] = @Original_ContactTitl"& _ 
                "e)) AND ((@IsNull_Address = 1 AND [Address] IS NULL) OR ([Address] = @Original_A"& _ 
                "ddress)) AND ((@IsNull_City = 1 AND [City] IS NULL) OR ([City] = @Original_City)"& _ 
                ") AND ((@IsNull_Region = 1 AND [Region] IS NULL) OR ([Region] = @Original_Region"& _ 
                ")) AND ((@IsNull_PostalCode = 1 AND [PostalCode] IS NULL) OR ([PostalCode] = @Or"& _ 
                "iginal_PostalCode)) AND ((@IsNull_Country = 1 AND [Country] IS NULL) OR ([Countr"& _ 
                "y] = @Original_Country)) AND ((@IsNull_Phone = 1 AND [Phone] IS NULL) OR ([Phone"& _ 
                "] = @Original_Phone)) AND ((@IsNull_Fax = 1 AND [Fax] IS NULL) OR ([Fax] = @Orig"& _ 
                "inal_Fax)))"
            Me.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CompanyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CompanyName", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ContactName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactName", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ContactName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactName", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ContactTitle", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactTitle", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ContactTitle", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactTitle", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Address", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Address", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_City", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_City", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Region", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Region", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Region", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Region", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PostalCode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PostalCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Country", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Country", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Country", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Country", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Phone", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Phone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Fax", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Fax", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Fax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Fax", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me.m_adapter.InsertCommand.Connection = Me.Connection
            Me.m_adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Customers] ([CustomerID], [CompanyName], [ContactName], [Conta"& _ 
                "ctTitle], [Address], [City], [Region], [PostalCode], [Country], [Phone], [Fax]) "& _ 
                "VALUES (@CustomerID, @CompanyName, @ContactName, @ContactTitle, @Address, @City,"& _ 
                " @Region, @PostalCode, @Country, @Phone, @Fax);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CustomerID, CompanyName,"& _ 
                " ContactName, ContactTitle, Address, City, Region, PostalCode, Country, Phone, F"& _ 
                "ax FROM Customers WHERE (CustomerID = @CustomerID)"
            Me.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CompanyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CompanyName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ContactName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ContactTitle", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactTitle", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@City", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Region", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Region", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PostalCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Country", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Country", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Phone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Fax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Fax", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me.m_adapter.UpdateCommand.Connection = Me.Connection
            Me.m_adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Customers] SET [CustomerID] = @CustomerID, [CompanyName] = @Company"& _ 
                "Name, [ContactName] = @ContactName, [ContactTitle] = @ContactTitle, [Address] = "& _ 
                "@Address, [City] = @City, [Region] = @Region, [PostalCode] = @PostalCode, [Count"& _ 
                "ry] = @Country, [Phone] = @Phone, [Fax] = @Fax WHERE (([CustomerID] = @Original_"& _ 
                "CustomerID) AND ([CompanyName] = @Original_CompanyName) AND ((@IsNull_ContactNam"& _ 
                "e = 1 AND [ContactName] IS NULL) OR ([ContactName] = @Original_ContactName)) AND"& _ 
                " ((@IsNull_ContactTitle = 1 AND [ContactTitle] IS NULL) OR ([ContactTitle] = @Or"& _ 
                "iginal_ContactTitle)) AND ((@IsNull_Address = 1 AND [Address] IS NULL) OR ([Addr"& _ 
                "ess] = @Original_Address)) AND ((@IsNull_City = 1 AND [City] IS NULL) OR ([City]"& _ 
                " = @Original_City)) AND ((@IsNull_Region = 1 AND [Region] IS NULL) OR ([Region] "& _ 
                "= @Original_Region)) AND ((@IsNull_PostalCode = 1 AND [PostalCode] IS NULL) OR ("& _ 
                "[PostalCode] = @Original_PostalCode)) AND ((@IsNull_Country = 1 AND [Country] IS"& _ 
                " NULL) OR ([Country] = @Original_Country)) AND ((@IsNull_Phone = 1 AND [Phone] I"& _ 
                "S NULL) OR ([Phone] = @Original_Phone)) AND ((@IsNull_Fax = 1 AND [Fax] IS NULL)"& _ 
                " OR ([Fax] = @Original_Fax)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CustomerID, CompanyName, ContactName, Con"& _ 
                "tactTitle, Address, City, Region, PostalCode, Country, Phone, Fax FROM Customers"& _ 
                " WHERE (CustomerID = @CustomerID)"
            Me.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CompanyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CompanyName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ContactName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ContactTitle", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactTitle", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@City", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Region", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Region", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PostalCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Country", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Country", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Phone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Fax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Fax", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CustomerID", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CompanyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CompanyName", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ContactName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactName", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ContactName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactName", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ContactTitle", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactTitle", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ContactTitle", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactTitle", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Address", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Address", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_City", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_City", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Region", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Region", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Region", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Region", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PostalCode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PostalCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Country", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Country", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Country", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Country", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Phone", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Phone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Fax", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Fax", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Fax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Fax", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        Private Sub InitConnection()
            Me.m_connection = New System.Data.SqlClient.SqlConnection
            Me.m_connection.ConnectionString = Accessing_Databases.Settings.Default.NorthwindConnectionString
        End Sub
        
        Private Sub InitCommandCollection()
            Me.m_commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me.m_commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me.m_commandCollection(0).Connection = Me.Connection
            Me.m_commandCollection(0).CommandText = "SELECT CustomerID, CompanyName, ContactName, ContactTitle, Address, City, Region,"& _ 
                " PostalCode, Country, Phone, Fax FROM dbo.Customers"
            Me.m_commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As NorthwindDataSet.CustomersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.m_clearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As NorthwindDataSet.CustomersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As NorthwindDataSet.CustomersDataTable = New NorthwindDataSet.CustomersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataTable As NorthwindDataSet.CustomersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataSet As NorthwindDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Customers")
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CustomerID As String, ByVal Original_CompanyName As String, ByVal Original_ContactName As String, ByVal Original_ContactTitle As String, ByVal Original_Address As String, ByVal Original_City As String, ByVal Original_Region As String, ByVal Original_PostalCode As String, ByVal Original_Country As String, ByVal Original_Phone As String, ByVal Original_Fax As String) As Integer
            If (Original_CustomerID Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CustomerID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CustomerID,String)
            End If
            If (Original_CompanyName Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CompanyName")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CompanyName,String)
            End If
            If (Original_ContactName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ContactName,String)
            End If
            If (Original_ContactTitle Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ContactTitle,String)
            End If
            If (Original_Address Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Address,String)
            End If
            If (Original_City Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_City,String)
            End If
            If (Original_Region Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Region,String)
            End If
            If (Original_PostalCode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_PostalCode,String)
            End If
            If (Original_Country Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_Country,String)
            End If
            If (Original_Phone Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_Phone,String)
            End If
            If (Original_Fax Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(19).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_Fax,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            Me.Adapter.DeleteCommand.Connection.Open
            Try 
                Return Me.Adapter.DeleteCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CustomerID As String, ByVal CompanyName As String, ByVal ContactName As String, ByVal ContactTitle As String, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal Phone As String, ByVal Fax As String) As Integer
            If (CustomerID Is Nothing) Then
                Throw New System.ArgumentNullException("CustomerID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CustomerID,String)
            End If
            If (CompanyName Is Nothing) Then
                Throw New System.ArgumentNullException("CompanyName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CompanyName,String)
            End If
            If (ContactName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ContactName,String)
            End If
            If (ContactTitle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ContactTitle,String)
            End If
            If (Address Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Address,String)
            End If
            If (City Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(City,String)
            End If
            If (Region Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Region,String)
            End If
            If (PostalCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PostalCode,String)
            End If
            If (Country Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Country,String)
            End If
            If (Phone Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Phone,String)
            End If
            If (Fax Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Fax,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            Me.Adapter.InsertCommand.Connection.Open
            Try 
                Return Me.Adapter.InsertCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CustomerID As String,  _
                    ByVal CompanyName As String,  _
                    ByVal ContactName As String,  _
                    ByVal ContactTitle As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal Region As String,  _
                    ByVal PostalCode As String,  _
                    ByVal Country As String,  _
                    ByVal Phone As String,  _
                    ByVal Fax As String,  _
                    ByVal Original_CustomerID As String,  _
                    ByVal Original_CompanyName As String,  _
                    ByVal Original_ContactName As String,  _
                    ByVal Original_ContactTitle As String,  _
                    ByVal Original_Address As String,  _
                    ByVal Original_City As String,  _
                    ByVal Original_Region As String,  _
                    ByVal Original_PostalCode As String,  _
                    ByVal Original_Country As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_Fax As String) As Integer
            If (CustomerID Is Nothing) Then
                Throw New System.ArgumentNullException("CustomerID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CustomerID,String)
            End If
            If (CompanyName Is Nothing) Then
                Throw New System.ArgumentNullException("CompanyName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CompanyName,String)
            End If
            If (ContactName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ContactName,String)
            End If
            If (ContactTitle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ContactTitle,String)
            End If
            If (Address Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Address,String)
            End If
            If (City Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(City,String)
            End If
            If (Region Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Region,String)
            End If
            If (PostalCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PostalCode,String)
            End If
            If (Country Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Country,String)
            End If
            If (Phone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Phone,String)
            End If
            If (Fax Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Fax,String)
            End If
            If (Original_CustomerID Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CustomerID")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CustomerID,String)
            End If
            If (Original_CompanyName Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CompanyName")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CompanyName,String)
            End If
            If (Original_ContactName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ContactName,String)
            End If
            If (Original_ContactTitle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_ContactTitle,String)
            End If
            If (Original_Address Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Address,String)
            End If
            If (Original_City Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_City,String)
            End If
            If (Original_Region Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Region,String)
            End If
            If (Original_PostalCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_PostalCode,String)
            End If
            If (Original_Country Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(26).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Country,String)
            End If
            If (Original_Phone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(28).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Phone,String)
            End If
            If (Original_Fax Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(30).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Fax,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            Me.Adapter.UpdateCommand.Connection.Open
            Try 
                Return Me.Adapter.UpdateCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
