'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version:2.0.40607.16
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("Products")>  _
Partial Public Class Products
    Inherits System.Data.DataSet
    
    Private tableAlphabetical_list_of_products As Alphabetical_list_of_productsDataTable
    
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Alphabetical list of products")) Is Nothing) Then
                MyBase.Tables.Add(New Alphabetical_list_of_productsDataTable(ds.Tables("Alphabetical list of products")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Alphabetical_list_of_products() As Alphabetical_list_of_productsDataTable
        Get
            Return Me.tableAlphabetical_list_of_products
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.ComponentModel.DefaultValueAttribute(false)>  _
    Public Shadows Property EnforceConstraints() As Boolean
        Get
            Return MyBase.EnforceConstraints
        End Get
        Set
            MyBase.EnforceConstraints = value
        End Set
    End Property
    
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As Products = CType(MyBase.Clone,Products)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        Me.Reset
        Dim ds As System.Data.DataSet = New System.Data.DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Alphabetical list of products")) Is Nothing) Then
            MyBase.Tables.Add(New Alphabetical_list_of_productsDataTable(ds.Tables("Alphabetical list of products")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAlphabetical_list_of_products = CType(MyBase.Tables("Alphabetical list of products"),Alphabetical_list_of_productsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAlphabetical_list_of_products) Is Nothing) Then
                Me.tableAlphabetical_list_of_products.InitVars
            End If
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Products"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Products.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = false
        Me.tableAlphabetical_list_of_products = New Alphabetical_list_of_productsDataTable
        MyBase.Tables.Add(Me.tableAlphabetical_list_of_products)
        Me.ExtendedProperties.Add("DSGenerator_DataSetName", "Products")
        Me.ExtendedProperties.Add("User_DataSetName", "Products")
    End Sub
    
    Private Function ShouldSerializeAlphabetical_list_of_products() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Products = New Products
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        If PublishLegacyWSDL Then
            Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
        Else
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(0)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            sequence.MaxOccurs = Decimal.MaxValue
            Dim attribute As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute.Name = "namespace"
            attribute.FixedValue = ds.Namespace
            type.Attributes.Add(attribute)
        End If
        type.Particle = sequence
        Return type
    End Function
    
    Protected Shared Function PublishLegacyWSDL() As Boolean
        Dim settings As System.Collections.Specialized.NameValueCollection = CType(System.Configuration.ConfigurationSettings.GetConfig("system.data.dataset"),System.Collections.Specialized.NameValueCollection)
        If (Not (settings) Is Nothing) Then
            Dim values() As String = settings.GetValues("WSDL_VERSION")
            If (Not (values) Is Nothing) Then
                Dim version As Single = Single.Parse(CType(values(0),String), CType(Nothing,System.IFormatProvider))
                Return (version < 2)
            End If
        End If
        Return true
    End Function
    
    Public Delegate Sub Alphabetical_list_of_productsRowChangeEventHandler(ByVal sender As Object, ByVal e As Alphabetical_list_of_productsRowChangeEvent)
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Alphabetical_list_of_productsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnProductID As System.Data.DataColumn
        
        Private columnProductName As System.Data.DataColumn
        
        Private columnSupplierID As System.Data.DataColumn
        
        Private columnCategoryID As System.Data.DataColumn
        
        Private columnQuantityPerUnit As System.Data.DataColumn
        
        Private columnUnitPrice As System.Data.DataColumn
        
        Private columnUnitsInStock As System.Data.DataColumn
        
        Private columnUnitsOnOrder As System.Data.DataColumn
        
        Private columnReorderLevel As System.Data.DataColumn
        
        Private columnDiscontinued As System.Data.DataColumn
        
        Private columnCategoryName As System.Data.DataColumn
        
        Private m_suspendValidation As Boolean = false
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Alphabetical list of products"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Friend ReadOnly Property ProductIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnProductID
            End Get
        End Property
        
        Friend ReadOnly Property ProductNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnProductName
            End Get
        End Property
        
        Friend ReadOnly Property SupplierIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSupplierID
            End Get
        End Property
        
        Friend ReadOnly Property CategoryIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCategoryID
            End Get
        End Property
        
        Friend ReadOnly Property QuantityPerUnitColumn() As System.Data.DataColumn
            Get
                Return Me.columnQuantityPerUnit
            End Get
        End Property
        
        Friend ReadOnly Property UnitPriceColumn() As System.Data.DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        Friend ReadOnly Property UnitsInStockColumn() As System.Data.DataColumn
            Get
                Return Me.columnUnitsInStock
            End Get
        End Property
        
        Friend ReadOnly Property UnitsOnOrderColumn() As System.Data.DataColumn
            Get
                Return Me.columnUnitsOnOrder
            End Get
        End Property
        
        Friend ReadOnly Property ReorderLevelColumn() As System.Data.DataColumn
            Get
                Return Me.columnReorderLevel
            End Get
        End Property
        
        Friend ReadOnly Property DiscontinuedColumn() As System.Data.DataColumn
            Get
                Return Me.columnDiscontinued
            End Get
        End Property
        
        Friend ReadOnly Property CategoryNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnCategoryName
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Alphabetical_list_of_productsRow
            Get
                Return CType(Me.Rows(index),Alphabetical_list_of_productsRow)
            End Get
        End Property
        
        Public Property SuspendValidation() As Boolean
            Get
                Return Me.m_suspendValidation
            End Get
            Set
                Me.m_suspendValidation = value
            End Set
        End Property
        
        Public Event ProductIDChanging As ProductIDChangeEventHandler
        
        Public Event ProductIDChanged As ProductIDChangeEventHandler
        
        Public Event ProductNameChanging As ProductNameChangeEventHandler
        
        Public Event ProductNameChanged As ProductNameChangeEventHandler
        
        Public Event SupplierIDChanging As SupplierIDChangeEventHandler
        
        Public Event SupplierIDChanged As SupplierIDChangeEventHandler
        
        Public Event CategoryIDChanging As CategoryIDChangeEventHandler
        
        Public Event CategoryIDChanged As CategoryIDChangeEventHandler
        
        Public Event QuantityPerUnitChanging As QuantityPerUnitChangeEventHandler
        
        Public Event QuantityPerUnitChanged As QuantityPerUnitChangeEventHandler
        
        Public Event UnitPriceChanging As UnitPriceChangeEventHandler
        
        Public Event UnitPriceChanged As UnitPriceChangeEventHandler
        
        Public Event UnitsInStockChanging As UnitsInStockChangeEventHandler
        
        Public Event UnitsInStockChanged As UnitsInStockChangeEventHandler
        
        Public Event UnitsOnOrderChanging As UnitsOnOrderChangeEventHandler
        
        Public Event UnitsOnOrderChanged As UnitsOnOrderChangeEventHandler
        
        Public Event ReorderLevelChanging As ReorderLevelChangeEventHandler
        
        Public Event ReorderLevelChanged As ReorderLevelChangeEventHandler
        
        Public Event DiscontinuedChanging As DiscontinuedChangeEventHandler
        
        Public Event DiscontinuedChanged As DiscontinuedChangeEventHandler
        
        Public Event CategoryNameChanging As CategoryNameChangeEventHandler
        
        Public Event CategoryNameChanged As CategoryNameChangeEventHandler
        
        Public Event Alphabetical_list_of_productsRowChanged As Alphabetical_list_of_productsRowChangeEventHandler
        
        Public Event Alphabetical_list_of_productsRowChanging As Alphabetical_list_of_productsRowChangeEventHandler
        
        Public Event Alphabetical_list_of_productsRowDeleted As Alphabetical_list_of_productsRowChangeEventHandler
        
        Public Event Alphabetical_list_of_productsRowDeleting As Alphabetical_list_of_productsRowChangeEventHandler
        
        Protected Overrides Sub OnColumnChanging(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanging(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "ProductID") Then
                If (Not (Me.ProductIDChangingEvent) Is Nothing) Then
                    RaiseEvent ProductIDChanging(Me, New ProductIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "ProductName") Then
                    If (Not (Me.ProductNameChangingEvent) Is Nothing) Then
                        RaiseEvent ProductNameChanging(Me, New ProductNameChangeEventArg(e))
                    End If
                Else
                    If (e.Column.ColumnName Is "SupplierID") Then
                        If (Not (Me.SupplierIDChangingEvent) Is Nothing) Then
                            RaiseEvent SupplierIDChanging(Me, New SupplierIDChangeEventArg(e))
                        End If
                    Else
                        If (e.Column.ColumnName Is "CategoryID") Then
                            If (Not (Me.CategoryIDChangingEvent) Is Nothing) Then
                                RaiseEvent CategoryIDChanging(Me, New CategoryIDChangeEventArg(e))
                            End If
                        Else
                            If (e.Column.ColumnName Is "QuantityPerUnit") Then
                                If (Not (Me.QuantityPerUnitChangingEvent) Is Nothing) Then
                                    RaiseEvent QuantityPerUnitChanging(Me, New QuantityPerUnitChangeEventArg(e))
                                End If
                            Else
                                If (e.Column.ColumnName Is "UnitPrice") Then
                                    If (Not (Me.UnitPriceChangingEvent) Is Nothing) Then
                                        RaiseEvent UnitPriceChanging(Me, New UnitPriceChangeEventArg(e))
                                    End If
                                Else
                                    If (e.Column.ColumnName Is "UnitsInStock") Then
                                        If (Not (Me.UnitsInStockChangingEvent) Is Nothing) Then
                                            RaiseEvent UnitsInStockChanging(Me, New UnitsInStockChangeEventArg(e))
                                        End If
                                    Else
                                        If (e.Column.ColumnName Is "UnitsOnOrder") Then
                                            If (Not (Me.UnitsOnOrderChangingEvent) Is Nothing) Then
                                                RaiseEvent UnitsOnOrderChanging(Me, New UnitsOnOrderChangeEventArg(e))
                                            End If
                                        Else
                                            If (e.Column.ColumnName Is "ReorderLevel") Then
                                                If (Not (Me.ReorderLevelChangingEvent) Is Nothing) Then
                                                    RaiseEvent ReorderLevelChanging(Me, New ReorderLevelChangeEventArg(e))
                                                End If
                                            Else
                                                If (e.Column.ColumnName Is "Discontinued") Then
                                                    If (Not (Me.DiscontinuedChangingEvent) Is Nothing) Then
                                                        RaiseEvent DiscontinuedChanging(Me, New DiscontinuedChangeEventArg(e))
                                                    End If
                                                Else
                                                    If (e.Column.ColumnName Is "CategoryName") Then
                                                        If (Not (Me.CategoryNameChangingEvent) Is Nothing) Then
                                                            RaiseEvent CategoryNameChanging(Me, New CategoryNameChangeEventArg(e))
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End Sub
        
        Protected Overrides Sub OnColumnChanged(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanged(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "ProductID") Then
                If (Not (Me.ProductIDChangedEvent) Is Nothing) Then
                    RaiseEvent ProductIDChanged(Me, New ProductIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "ProductName") Then
                    If (Not (Me.ProductNameChangedEvent) Is Nothing) Then
                        RaiseEvent ProductNameChanged(Me, New ProductNameChangeEventArg(e))
                    End If
                Else
                    If (e.Column.ColumnName Is "SupplierID") Then
                        If (Not (Me.SupplierIDChangedEvent) Is Nothing) Then
                            RaiseEvent SupplierIDChanged(Me, New SupplierIDChangeEventArg(e))
                        End If
                    Else
                        If (e.Column.ColumnName Is "CategoryID") Then
                            If (Not (Me.CategoryIDChangedEvent) Is Nothing) Then
                                RaiseEvent CategoryIDChanged(Me, New CategoryIDChangeEventArg(e))
                            End If
                        Else
                            If (e.Column.ColumnName Is "QuantityPerUnit") Then
                                If (Not (Me.QuantityPerUnitChangedEvent) Is Nothing) Then
                                    RaiseEvent QuantityPerUnitChanged(Me, New QuantityPerUnitChangeEventArg(e))
                                End If
                            Else
                                If (e.Column.ColumnName Is "UnitPrice") Then
                                    If (Not (Me.UnitPriceChangedEvent) Is Nothing) Then
                                        RaiseEvent UnitPriceChanged(Me, New UnitPriceChangeEventArg(e))
                                    End If
                                Else
                                    If (e.Column.ColumnName Is "UnitsInStock") Then
                                        If (Not (Me.UnitsInStockChangedEvent) Is Nothing) Then
                                            RaiseEvent UnitsInStockChanged(Me, New UnitsInStockChangeEventArg(e))
                                        End If
                                    Else
                                        If (e.Column.ColumnName Is "UnitsOnOrder") Then
                                            If (Not (Me.UnitsOnOrderChangedEvent) Is Nothing) Then
                                                RaiseEvent UnitsOnOrderChanged(Me, New UnitsOnOrderChangeEventArg(e))
                                            End If
                                        Else
                                            If (e.Column.ColumnName Is "ReorderLevel") Then
                                                If (Not (Me.ReorderLevelChangedEvent) Is Nothing) Then
                                                    RaiseEvent ReorderLevelChanged(Me, New ReorderLevelChangeEventArg(e))
                                                End If
                                            Else
                                                If (e.Column.ColumnName Is "Discontinued") Then
                                                    If (Not (Me.DiscontinuedChangedEvent) Is Nothing) Then
                                                        RaiseEvent DiscontinuedChanged(Me, New DiscontinuedChangeEventArg(e))
                                                    End If
                                                Else
                                                    If (e.Column.ColumnName Is "CategoryName") Then
                                                        If (Not (Me.CategoryNameChangedEvent) Is Nothing) Then
                                                            RaiseEvent CategoryNameChanged(Me, New CategoryNameChangeEventArg(e))
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End Sub
        
        Public Overloads Sub AddAlphabetical_list_of_productsRow(ByVal row As Alphabetical_list_of_productsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAlphabetical_list_of_productsRow(ByVal ProductName As String, ByVal SupplierID As Integer, ByVal CategoryID As Integer, ByVal QuantityPerUnit As String, ByVal UnitPrice As Decimal, ByVal UnitsInStock As Short, ByVal UnitsOnOrder As Short, ByVal ReorderLevel As Short, ByVal Discontinued As Boolean, ByVal CategoryName As String) As Alphabetical_list_of_productsRow
            Dim rowAlphabetical_list_of_productsRow As Alphabetical_list_of_productsRow = CType(Me.NewRow,Alphabetical_list_of_productsRow)
            rowAlphabetical_list_of_productsRow.ItemArray = New Object() {Nothing, ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued, CategoryName}
            Me.Rows.Add(rowAlphabetical_list_of_productsRow)
            Return rowAlphabetical_list_of_productsRow
        End Function
        
        Public Function FindByProductID(ByVal ProductID As Integer) As Alphabetical_list_of_productsRow
            Return CType(Me.Rows.Find(New Object() {ProductID}),Alphabetical_list_of_productsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As Alphabetical_list_of_productsDataTable = CType(MyBase.Clone,Alphabetical_list_of_productsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New Alphabetical_list_of_productsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnProductID = MyBase.Columns("ProductID")
            Me.columnProductName = MyBase.Columns("ProductName")
            Me.columnSupplierID = MyBase.Columns("SupplierID")
            Me.columnCategoryID = MyBase.Columns("CategoryID")
            Me.columnQuantityPerUnit = MyBase.Columns("QuantityPerUnit")
            Me.columnUnitPrice = MyBase.Columns("UnitPrice")
            Me.columnUnitsInStock = MyBase.Columns("UnitsInStock")
            Me.columnUnitsOnOrder = MyBase.Columns("UnitsOnOrder")
            Me.columnReorderLevel = MyBase.Columns("ReorderLevel")
            Me.columnDiscontinued = MyBase.Columns("Discontinued")
            Me.columnCategoryName = MyBase.Columns("CategoryName")
        End Sub
        
        Private Sub InitClass()
            Me.columnProductID = New System.Data.DataColumn("ProductID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnProductID.ExtendedProperties.Add("Generator_ChangedEventName", "ProductIDChanged")
            Me.columnProductID.ExtendedProperties.Add("Generator_ChangingEventName", "ProductIDChanging")
            Me.columnProductID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ProductID")
            Me.columnProductID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ProductIDColumn")
            Me.columnProductID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnProductID")
            Me.columnProductID.ExtendedProperties.Add("Generator_DelegateName", "ProductIDChangeEventHandler")
            Me.columnProductID.ExtendedProperties.Add("Generator_EventArgName", "ProductIDChangeEventArg")
            Me.columnProductID.ExtendedProperties.Add("User_ColumnName", "ProductID")
            MyBase.Columns.Add(Me.columnProductID)
            Me.columnProductName = New System.Data.DataColumn("ProductName", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnProductName.ExtendedProperties.Add("Generator_ChangedEventName", "ProductNameChanged")
            Me.columnProductName.ExtendedProperties.Add("Generator_ChangingEventName", "ProductNameChanging")
            Me.columnProductName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ProductName")
            Me.columnProductName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ProductNameColumn")
            Me.columnProductName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnProductName")
            Me.columnProductName.ExtendedProperties.Add("Generator_DelegateName", "ProductNameChangeEventHandler")
            Me.columnProductName.ExtendedProperties.Add("Generator_EventArgName", "ProductNameChangeEventArg")
            Me.columnProductName.ExtendedProperties.Add("User_ColumnName", "ProductName")
            MyBase.Columns.Add(Me.columnProductName)
            Me.columnSupplierID = New System.Data.DataColumn("SupplierID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnSupplierID.ExtendedProperties.Add("Generator_ChangedEventName", "SupplierIDChanged")
            Me.columnSupplierID.ExtendedProperties.Add("Generator_ChangingEventName", "SupplierIDChanging")
            Me.columnSupplierID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "SupplierID")
            Me.columnSupplierID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "SupplierIDColumn")
            Me.columnSupplierID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnSupplierID")
            Me.columnSupplierID.ExtendedProperties.Add("Generator_DelegateName", "SupplierIDChangeEventHandler")
            Me.columnSupplierID.ExtendedProperties.Add("Generator_EventArgName", "SupplierIDChangeEventArg")
            Me.columnSupplierID.ExtendedProperties.Add("User_ColumnName", "SupplierID")
            MyBase.Columns.Add(Me.columnSupplierID)
            Me.columnCategoryID = New System.Data.DataColumn("CategoryID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnCategoryID.ExtendedProperties.Add("Generator_ChangedEventName", "CategoryIDChanged")
            Me.columnCategoryID.ExtendedProperties.Add("Generator_ChangingEventName", "CategoryIDChanging")
            Me.columnCategoryID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CategoryID")
            Me.columnCategoryID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CategoryIDColumn")
            Me.columnCategoryID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCategoryID")
            Me.columnCategoryID.ExtendedProperties.Add("Generator_DelegateName", "CategoryIDChangeEventHandler")
            Me.columnCategoryID.ExtendedProperties.Add("Generator_EventArgName", "CategoryIDChangeEventArg")
            Me.columnCategoryID.ExtendedProperties.Add("User_ColumnName", "CategoryID")
            MyBase.Columns.Add(Me.columnCategoryID)
            Me.columnQuantityPerUnit = New System.Data.DataColumn("QuantityPerUnit", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnQuantityPerUnit.ExtendedProperties.Add("Generator_ChangedEventName", "QuantityPerUnitChanged")
            Me.columnQuantityPerUnit.ExtendedProperties.Add("Generator_ChangingEventName", "QuantityPerUnitChanging")
            Me.columnQuantityPerUnit.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "QuantityPerUnit")
            Me.columnQuantityPerUnit.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "QuantityPerUnitColumn")
            Me.columnQuantityPerUnit.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnQuantityPerUnit")
            Me.columnQuantityPerUnit.ExtendedProperties.Add("Generator_DelegateName", "QuantityPerUnitChangeEventHandler")
            Me.columnQuantityPerUnit.ExtendedProperties.Add("Generator_EventArgName", "QuantityPerUnitChangeEventArg")
            Me.columnQuantityPerUnit.ExtendedProperties.Add("User_ColumnName", "QuantityPerUnit")
            MyBase.Columns.Add(Me.columnQuantityPerUnit)
            Me.columnUnitPrice = New System.Data.DataColumn("UnitPrice", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me.columnUnitPrice.ExtendedProperties.Add("Generator_ChangedEventName", "UnitPriceChanged")
            Me.columnUnitPrice.ExtendedProperties.Add("Generator_ChangingEventName", "UnitPriceChanging")
            Me.columnUnitPrice.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UnitPrice")
            Me.columnUnitPrice.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UnitPriceColumn")
            Me.columnUnitPrice.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUnitPrice")
            Me.columnUnitPrice.ExtendedProperties.Add("Generator_DelegateName", "UnitPriceChangeEventHandler")
            Me.columnUnitPrice.ExtendedProperties.Add("Generator_EventArgName", "UnitPriceChangeEventArg")
            Me.columnUnitPrice.ExtendedProperties.Add("User_ColumnName", "UnitPrice")
            MyBase.Columns.Add(Me.columnUnitPrice)
            Me.columnUnitsInStock = New System.Data.DataColumn("UnitsInStock", GetType(Short), Nothing, System.Data.MappingType.Element)
            Me.columnUnitsInStock.ExtendedProperties.Add("Generator_ChangedEventName", "UnitsInStockChanged")
            Me.columnUnitsInStock.ExtendedProperties.Add("Generator_ChangingEventName", "UnitsInStockChanging")
            Me.columnUnitsInStock.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UnitsInStock")
            Me.columnUnitsInStock.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UnitsInStockColumn")
            Me.columnUnitsInStock.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUnitsInStock")
            Me.columnUnitsInStock.ExtendedProperties.Add("Generator_DelegateName", "UnitsInStockChangeEventHandler")
            Me.columnUnitsInStock.ExtendedProperties.Add("Generator_EventArgName", "UnitsInStockChangeEventArg")
            Me.columnUnitsInStock.ExtendedProperties.Add("User_ColumnName", "UnitsInStock")
            MyBase.Columns.Add(Me.columnUnitsInStock)
            Me.columnUnitsOnOrder = New System.Data.DataColumn("UnitsOnOrder", GetType(Short), Nothing, System.Data.MappingType.Element)
            Me.columnUnitsOnOrder.ExtendedProperties.Add("Generator_ChangedEventName", "UnitsOnOrderChanged")
            Me.columnUnitsOnOrder.ExtendedProperties.Add("Generator_ChangingEventName", "UnitsOnOrderChanging")
            Me.columnUnitsOnOrder.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UnitsOnOrder")
            Me.columnUnitsOnOrder.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UnitsOnOrderColumn")
            Me.columnUnitsOnOrder.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUnitsOnOrder")
            Me.columnUnitsOnOrder.ExtendedProperties.Add("Generator_DelegateName", "UnitsOnOrderChangeEventHandler")
            Me.columnUnitsOnOrder.ExtendedProperties.Add("Generator_EventArgName", "UnitsOnOrderChangeEventArg")
            Me.columnUnitsOnOrder.ExtendedProperties.Add("User_ColumnName", "UnitsOnOrder")
            MyBase.Columns.Add(Me.columnUnitsOnOrder)
            Me.columnReorderLevel = New System.Data.DataColumn("ReorderLevel", GetType(Short), Nothing, System.Data.MappingType.Element)
            Me.columnReorderLevel.ExtendedProperties.Add("Generator_ChangedEventName", "ReorderLevelChanged")
            Me.columnReorderLevel.ExtendedProperties.Add("Generator_ChangingEventName", "ReorderLevelChanging")
            Me.columnReorderLevel.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ReorderLevel")
            Me.columnReorderLevel.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ReorderLevelColumn")
            Me.columnReorderLevel.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnReorderLevel")
            Me.columnReorderLevel.ExtendedProperties.Add("Generator_DelegateName", "ReorderLevelChangeEventHandler")
            Me.columnReorderLevel.ExtendedProperties.Add("Generator_EventArgName", "ReorderLevelChangeEventArg")
            Me.columnReorderLevel.ExtendedProperties.Add("User_ColumnName", "ReorderLevel")
            MyBase.Columns.Add(Me.columnReorderLevel)
            Me.columnDiscontinued = New System.Data.DataColumn("Discontinued", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            Me.columnDiscontinued.ExtendedProperties.Add("Generator_ChangedEventName", "DiscontinuedChanged")
            Me.columnDiscontinued.ExtendedProperties.Add("Generator_ChangingEventName", "DiscontinuedChanging")
            Me.columnDiscontinued.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Discontinued")
            Me.columnDiscontinued.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DiscontinuedColumn")
            Me.columnDiscontinued.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDiscontinued")
            Me.columnDiscontinued.ExtendedProperties.Add("Generator_DelegateName", "DiscontinuedChangeEventHandler")
            Me.columnDiscontinued.ExtendedProperties.Add("Generator_EventArgName", "DiscontinuedChangeEventArg")
            Me.columnDiscontinued.ExtendedProperties.Add("User_ColumnName", "Discontinued")
            MyBase.Columns.Add(Me.columnDiscontinued)
            Me.columnCategoryName = New System.Data.DataColumn("CategoryName", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnCategoryName.ExtendedProperties.Add("Generator_ChangedEventName", "CategoryNameChanged")
            Me.columnCategoryName.ExtendedProperties.Add("Generator_ChangingEventName", "CategoryNameChanging")
            Me.columnCategoryName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CategoryName")
            Me.columnCategoryName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CategoryNameColumn")
            Me.columnCategoryName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCategoryName")
            Me.columnCategoryName.ExtendedProperties.Add("Generator_DelegateName", "CategoryNameChangeEventHandler")
            Me.columnCategoryName.ExtendedProperties.Add("Generator_EventArgName", "CategoryNameChangeEventArg")
            Me.columnCategoryName.ExtendedProperties.Add("User_ColumnName", "CategoryName")
            MyBase.Columns.Add(Me.columnCategoryName)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnProductID}, true))
            Me.columnProductID.AutoIncrement = true
            Me.columnProductID.AllowDBNull = false
            Me.columnProductID.ReadOnly = true
            Me.columnProductID.Unique = true
            Me.columnProductName.AllowDBNull = false
            Me.columnProductName.MaxLength = 40
            Me.columnQuantityPerUnit.MaxLength = 20
            Me.columnDiscontinued.AllowDBNull = false
            Me.columnCategoryName.AllowDBNull = false
            Me.columnCategoryName.MaxLength = 15
            Me.ExtendedProperties.Add("Generator_RowClassName", "Alphabetical_list_of_productsRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "Alphabetical_list_of_productsRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "Alphabetical_list_of_productsRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation")
            Me.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation")
            Me.ExtendedProperties.Add("Generator_TableClassName", "Alphabetical_list_of_productsDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "Alphabetical_list_of_products")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableAlphabetical_list_of_products")
            Me.ExtendedProperties.Add("User_TableName", "Alphabetical list of products")
        End Sub
        
        Public Function NewAlphabetical_list_of_productsRow() As Alphabetical_list_of_productsRow
            Return CType(Me.NewRow,Alphabetical_list_of_productsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New Alphabetical_list_of_productsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Alphabetical_list_of_productsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Alphabetical_list_of_productsRowChangedEvent) Is Nothing) Then
                RaiseEvent Alphabetical_list_of_productsRowChanged(Me, New Alphabetical_list_of_productsRowChangeEvent(CType(e.Row,Alphabetical_list_of_productsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Alphabetical_list_of_productsRowChangingEvent) Is Nothing) Then
                RaiseEvent Alphabetical_list_of_productsRowChanging(Me, New Alphabetical_list_of_productsRowChangeEvent(CType(e.Row,Alphabetical_list_of_productsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Alphabetical_list_of_productsRowDeletedEvent) Is Nothing) Then
                RaiseEvent Alphabetical_list_of_productsRowDeleted(Me, New Alphabetical_list_of_productsRowChangeEvent(CType(e.Row,Alphabetical_list_of_productsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Alphabetical_list_of_productsRowDeletingEvent) Is Nothing) Then
                RaiseEvent Alphabetical_list_of_productsRowDeleting(Me, New Alphabetical_list_of_productsRowChangeEvent(CType(e.Row,Alphabetical_list_of_productsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAlphabetical_list_of_productsRow(ByVal row As Alphabetical_list_of_productsRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Products = New Products
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Alphabetical_list_of_productsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
        
        Public Delegate Sub ProductIDChangeEventHandler(ByVal sender As Alphabetical_list_of_productsDataTable, ByVal e As ProductIDChangeEventArg)
        
        Public Class ProductIDChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As Alphabetical_list_of_productsRow
                Get
                    Return CType(Me.evArgs.Row,Alphabetical_list_of_productsRow)
                End Get
            End Property
            
            Public ReadOnly Property ProductIDColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Integer
                Get
                    Return CType(Me.evArgs.ProposedValue,Integer)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Integer)
                End Set
            End Property
        End Class
        
        Public Delegate Sub ProductNameChangeEventHandler(ByVal sender As Alphabetical_list_of_productsDataTable, ByVal e As ProductNameChangeEventArg)
        
        Public Class ProductNameChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As Alphabetical_list_of_productsRow
                Get
                    Return CType(Me.evArgs.Row,Alphabetical_list_of_productsRow)
                End Get
            End Property
            
            Public ReadOnly Property ProductNameColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
        
        Public Delegate Sub SupplierIDChangeEventHandler(ByVal sender As Alphabetical_list_of_productsDataTable, ByVal e As SupplierIDChangeEventArg)
        
        Public Class SupplierIDChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As Alphabetical_list_of_productsRow
                Get
                    Return CType(Me.evArgs.Row,Alphabetical_list_of_productsRow)
                End Get
            End Property
            
            Public ReadOnly Property SupplierIDColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Integer
                Get
                    Return CType(Me.evArgs.ProposedValue,Integer)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Integer)
                End Set
            End Property
        End Class
        
        Public Delegate Sub CategoryIDChangeEventHandler(ByVal sender As Alphabetical_list_of_productsDataTable, ByVal e As CategoryIDChangeEventArg)
        
        Public Class CategoryIDChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As Alphabetical_list_of_productsRow
                Get
                    Return CType(Me.evArgs.Row,Alphabetical_list_of_productsRow)
                End Get
            End Property
            
            Public ReadOnly Property CategoryIDColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Integer
                Get
                    Return CType(Me.evArgs.ProposedValue,Integer)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Integer)
                End Set
            End Property
        End Class
        
        Public Delegate Sub QuantityPerUnitChangeEventHandler(ByVal sender As Alphabetical_list_of_productsDataTable, ByVal e As QuantityPerUnitChangeEventArg)
        
        Public Class QuantityPerUnitChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As Alphabetical_list_of_productsRow
                Get
                    Return CType(Me.evArgs.Row,Alphabetical_list_of_productsRow)
                End Get
            End Property
            
            Public ReadOnly Property QuantityPerUnitColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
        
        Public Delegate Sub UnitPriceChangeEventHandler(ByVal sender As Alphabetical_list_of_productsDataTable, ByVal e As UnitPriceChangeEventArg)
        
        Public Class UnitPriceChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As Alphabetical_list_of_productsRow
                Get
                    Return CType(Me.evArgs.Row,Alphabetical_list_of_productsRow)
                End Get
            End Property
            
            Public ReadOnly Property UnitPriceColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Decimal
                Get
                    Return CType(Me.evArgs.ProposedValue,Decimal)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Decimal)
                End Set
            End Property
        End Class
        
        Public Delegate Sub UnitsInStockChangeEventHandler(ByVal sender As Alphabetical_list_of_productsDataTable, ByVal e As UnitsInStockChangeEventArg)
        
        Public Class UnitsInStockChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As Alphabetical_list_of_productsRow
                Get
                    Return CType(Me.evArgs.Row,Alphabetical_list_of_productsRow)
                End Get
            End Property
            
            Public ReadOnly Property UnitsInStockColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Short
                Get
                    Return CType(Me.evArgs.ProposedValue,Short)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Short)
                End Set
            End Property
        End Class
        
        Public Delegate Sub UnitsOnOrderChangeEventHandler(ByVal sender As Alphabetical_list_of_productsDataTable, ByVal e As UnitsOnOrderChangeEventArg)
        
        Public Class UnitsOnOrderChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As Alphabetical_list_of_productsRow
                Get
                    Return CType(Me.evArgs.Row,Alphabetical_list_of_productsRow)
                End Get
            End Property
            
            Public ReadOnly Property UnitsOnOrderColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Short
                Get
                    Return CType(Me.evArgs.ProposedValue,Short)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Short)
                End Set
            End Property
        End Class
        
        Public Delegate Sub ReorderLevelChangeEventHandler(ByVal sender As Alphabetical_list_of_productsDataTable, ByVal e As ReorderLevelChangeEventArg)
        
        Public Class ReorderLevelChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As Alphabetical_list_of_productsRow
                Get
                    Return CType(Me.evArgs.Row,Alphabetical_list_of_productsRow)
                End Get
            End Property
            
            Public ReadOnly Property ReorderLevelColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Short
                Get
                    Return CType(Me.evArgs.ProposedValue,Short)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Short)
                End Set
            End Property
        End Class
        
        Public Delegate Sub DiscontinuedChangeEventHandler(ByVal sender As Alphabetical_list_of_productsDataTable, ByVal e As DiscontinuedChangeEventArg)
        
        Public Class DiscontinuedChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As Alphabetical_list_of_productsRow
                Get
                    Return CType(Me.evArgs.Row,Alphabetical_list_of_productsRow)
                End Get
            End Property
            
            Public ReadOnly Property DiscontinuedColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Boolean
                Get
                    Return CType(Me.evArgs.ProposedValue,Boolean)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Boolean)
                End Set
            End Property
        End Class
        
        Public Delegate Sub CategoryNameChangeEventHandler(ByVal sender As Alphabetical_list_of_productsDataTable, ByVal e As CategoryNameChangeEventArg)
        
        Public Class CategoryNameChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As Alphabetical_list_of_productsRow
                Get
                    Return CType(Me.evArgs.Row,Alphabetical_list_of_productsRow)
                End Get
            End Property
            
            Public ReadOnly Property CategoryNameColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
    End Class
    
    Public Class Alphabetical_list_of_productsRow
        Inherits System.Data.DataRow
        
        Private tableAlphabetical_list_of_products As Alphabetical_list_of_productsDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAlphabetical_list_of_products = CType(Me.Table,Alphabetical_list_of_productsDataTable)
        End Sub
        
        Public Property ProductID() As Integer
            Get
                Return CType(Me(Me.tableAlphabetical_list_of_products.ProductIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAlphabetical_list_of_products.ProductIDColumn) = value
            End Set
        End Property
        
        Public Property ProductName() As String
            Get
                Return CType(Me(Me.tableAlphabetical_list_of_products.ProductNameColumn),String)
            End Get
            Set
                Me(Me.tableAlphabetical_list_of_products.ProductNameColumn) = value
            End Set
        End Property
        
        Public Property SupplierID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAlphabetical_list_of_products.SupplierIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAlphabetical_list_of_products.SupplierIDColumn) = value
            End Set
        End Property
        
        Public Property CategoryID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAlphabetical_list_of_products.CategoryIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAlphabetical_list_of_products.CategoryIDColumn) = value
            End Set
        End Property
        
        Public Property QuantityPerUnit() As String
            Get
                Try 
                    Return CType(Me(Me.tableAlphabetical_list_of_products.QuantityPerUnitColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAlphabetical_list_of_products.QuantityPerUnitColumn) = value
            End Set
        End Property
        
        Public Property UnitPrice() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAlphabetical_list_of_products.UnitPriceColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAlphabetical_list_of_products.UnitPriceColumn) = value
            End Set
        End Property
        
        Public Property UnitsInStock() As Short
            Get
                Try 
                    Return CType(Me(Me.tableAlphabetical_list_of_products.UnitsInStockColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAlphabetical_list_of_products.UnitsInStockColumn) = value
            End Set
        End Property
        
        Public Property UnitsOnOrder() As Short
            Get
                Try 
                    Return CType(Me(Me.tableAlphabetical_list_of_products.UnitsOnOrderColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAlphabetical_list_of_products.UnitsOnOrderColumn) = value
            End Set
        End Property
        
        Public Property ReorderLevel() As Short
            Get
                Try 
                    Return CType(Me(Me.tableAlphabetical_list_of_products.ReorderLevelColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAlphabetical_list_of_products.ReorderLevelColumn) = value
            End Set
        End Property
        
        Public Property Discontinued() As Boolean
            Get
                Return CType(Me(Me.tableAlphabetical_list_of_products.DiscontinuedColumn),Boolean)
            End Get
            Set
                Me(Me.tableAlphabetical_list_of_products.DiscontinuedColumn) = value
            End Set
        End Property
        
        Public Property CategoryName() As String
            Get
                Return CType(Me(Me.tableAlphabetical_list_of_products.CategoryNameColumn),String)
            End Get
            Set
                Me(Me.tableAlphabetical_list_of_products.CategoryNameColumn) = value
            End Set
        End Property
        
        Public Function IsSupplierIDNull() As Boolean
            Return Me.IsNull(Me.tableAlphabetical_list_of_products.SupplierIDColumn)
        End Function
        
        Public Sub SetSupplierIDNull()
            Me(Me.tableAlphabetical_list_of_products.SupplierIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCategoryIDNull() As Boolean
            Return Me.IsNull(Me.tableAlphabetical_list_of_products.CategoryIDColumn)
        End Function
        
        Public Sub SetCategoryIDNull()
            Me(Me.tableAlphabetical_list_of_products.CategoryIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQuantityPerUnitNull() As Boolean
            Return Me.IsNull(Me.tableAlphabetical_list_of_products.QuantityPerUnitColumn)
        End Function
        
        Public Sub SetQuantityPerUnitNull()
            Me(Me.tableAlphabetical_list_of_products.QuantityPerUnitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnitPriceNull() As Boolean
            Return Me.IsNull(Me.tableAlphabetical_list_of_products.UnitPriceColumn)
        End Function
        
        Public Sub SetUnitPriceNull()
            Me(Me.tableAlphabetical_list_of_products.UnitPriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnitsInStockNull() As Boolean
            Return Me.IsNull(Me.tableAlphabetical_list_of_products.UnitsInStockColumn)
        End Function
        
        Public Sub SetUnitsInStockNull()
            Me(Me.tableAlphabetical_list_of_products.UnitsInStockColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnitsOnOrderNull() As Boolean
            Return Me.IsNull(Me.tableAlphabetical_list_of_products.UnitsOnOrderColumn)
        End Function
        
        Public Sub SetUnitsOnOrderNull()
            Me(Me.tableAlphabetical_list_of_products.UnitsOnOrderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReorderLevelNull() As Boolean
            Return Me.IsNull(Me.tableAlphabetical_list_of_products.ReorderLevelColumn)
        End Function
        
        Public Sub SetReorderLevelNull()
            Me(Me.tableAlphabetical_list_of_products.ReorderLevelColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Public Class Alphabetical_list_of_productsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As Alphabetical_list_of_productsRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As Alphabetical_list_of_productsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As Alphabetical_list_of_productsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Public Interface IAlphabetical_list_of_productsTableAdapter
    
    Function Fill(ByVal dataSet As Products) As Integer
    
    Function Fill(ByVal dataTable As Products.Alphabetical_list_of_productsDataTable) As Integer
    
    Function GetData() As Products.Alphabetical_list_of_productsDataTable
    
    Function Update(ByVal dataSet As Products) As Integer
    
    Function Update(ByVal dataTable As Products.Alphabetical_list_of_productsDataTable) As Integer
    
    Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
    
    Function Update(ByVal dataRow As System.Data.DataRow) As Integer
End Interface

<System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.ComponentModel.DataObjectAttribute(true)>  _
Partial Public Class Alphabetical_list_of_productsTableAdapter
    Inherits System.ComponentModel.Component
    Implements IAlphabetical_list_of_productsTableAdapter
    
    Private m_DeleteCommand As System.Data.SqlClient.SqlCommand
    
    Private m_InsertCommand As System.Data.SqlClient.SqlCommand
    
    Private m_UpdateCommand As System.Data.SqlClient.SqlCommand
    
    Private WithEvents m_adapter As System.Data.SqlClient.SqlDataAdapter
    
    Private m_connection As System.Data.SqlClient.SqlConnection
    
    Private m_commandCollection() As System.Data.IDbCommand
    
    Private m_transaction As System.Data.SqlClient.SqlTransaction
    
    Private m_clearBeforeFill As Boolean = true
    
    Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
        Get
            If (Me.m_adapter Is Nothing) Then
                Me.InitAdapter
            End If
            Return Me.m_adapter
        End Get
    End Property
    
    Friend ReadOnly Property Connection() As System.Data.SqlClient.SqlConnection
        Get
            If (Me.m_connection Is Nothing) Then
                Me.InitConnection
            End If
            Return Me.m_connection
        End Get
    End Property
    
    Friend ReadOnly Property CommandCollection() As System.Data.IDbCommand()
        Get
            If (Me.m_commandCollection Is Nothing) Then
                Me.InitCommandCollection
            End If
            Return Me.m_commandCollection
        End Get
    End Property
    
    Friend Property Transaction() As System.Data.SqlClient.SqlTransaction
        Get
            Return Me.m_transaction
        End Get
        Set
            Dim oldTransaction As System.Data.SqlClient.SqlTransaction = Me.m_transaction
            Me.m_transaction = value
            Dim i As Integer = 0
            Do While (i < Me.CommandCollection.Length)
                If (CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Transaction Is oldTransaction) Then
                    CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Transaction = Me.m_transaction
                End If
                i = (i + 1)
            Loop
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                If (Me.Adapter.DeleteCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.DeleteCommand.Transaction = Me.m_transaction
                End If
            End If
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                If (Me.Adapter.InsertCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.InsertCommand.Transaction = Me.m_transaction
                End If
            End If
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                If (Me.Adapter.UpdateCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.UpdateCommand.Transaction = Me.m_transaction
                End If
            End If
        End Set
    End Property
    
    Public Property ClearBeforeFill() As Boolean
        Get
            Return Me.m_clearBeforeFill
        End Get
        Set
            Me.m_clearBeforeFill = value
        End Set
    End Property
    
    Private Sub InitAdapter()
        Me.m_adapter = New System.Data.SqlClient.SqlDataAdapter
        Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
        tableMapping.SourceTable = "Table"
        tableMapping.DataSetTable = "Alphabetical list of products"
        tableMapping.ColumnMappings.Add("ProductID", "ProductID")
        tableMapping.ColumnMappings.Add("ProductName", "ProductName")
        tableMapping.ColumnMappings.Add("SupplierID", "SupplierID")
        tableMapping.ColumnMappings.Add("CategoryID", "CategoryID")
        tableMapping.ColumnMappings.Add("QuantityPerUnit", "QuantityPerUnit")
        tableMapping.ColumnMappings.Add("UnitPrice", "UnitPrice")
        tableMapping.ColumnMappings.Add("UnitsInStock", "UnitsInStock")
        tableMapping.ColumnMappings.Add("UnitsOnOrder", "UnitsOnOrder")
        tableMapping.ColumnMappings.Add("ReorderLevel", "ReorderLevel")
        tableMapping.ColumnMappings.Add("Discontinued", "Discontinued")
        tableMapping.ColumnMappings.Add("CategoryName", "CategoryName")
        Me.m_adapter.TableMappings.Add(tableMapping)
        Me.m_adapter.SelectCommand = New System.Data.SqlClient.SqlCommand
        CType(Me.m_adapter.SelectCommand,System.Data.SqlClient.SqlCommand).Connection = Me.Connection
        CType(Me.m_adapter.SelectCommand,System.Data.SqlClient.SqlCommand).CommandText = "SELECT ProductID, ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice"& _ 
            ", UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued, CategoryName FROM dbo."& _ 
            "[Alphabetical list of products]"
        CType(Me.m_adapter.SelectCommand,System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.Text
    End Sub
    
    Private Sub InitConnection()
        Me.m_connection = New System.Data.SqlClient.SqlConnection
        Dim csValue As String = Nothing
        Dim settingsType As System.Type = Nothing
        Dim trs As System.ComponentModel.Design.ITypeResolutionService = Nothing
        If (Not (Me.Site) Is Nothing) Then
            trs = CType(Me.Site.GetService(GetType(System.ComponentModel.Design.ITypeResolutionService)),System.ComponentModel.Design.ITypeResolutionService)
        End If
        If (Not (trs) Is Nothing) Then
            settingsType = trs.GetType("ExploreVisualStudio.MySettings")
        Else
            settingsType = System.Type.GetType("ExploreVisualStudio.MySettings")
        End If
        If (Not (settingsType) Is Nothing) Then
            Dim diProperty As System.Reflection.PropertyInfo = settingsType.GetProperty("Value")
            Dim csProperty As System.Reflection.PropertyInfo = settingsType.GetProperty("NorthwindConnection")
            Dim diValue As Object = diProperty.GetValue(Nothing, Nothing)
            csValue = csProperty.GetValue(diValue, Nothing).ToString
        End If
        Me.m_connection.ConnectionString = csValue
    End Sub
    
    Private Sub InitCommandCollection()
        Me.m_commandCollection = New System.Data.IDbCommand(0) {}
        Me.m_commandCollection(0) = New System.Data.SqlClient.SqlCommand
        CType(Me.m_commandCollection(0),System.Data.SqlClient.SqlCommand).Connection = Me.Connection
        CType(Me.m_commandCollection(0),System.Data.SqlClient.SqlCommand).CommandText = "SELECT ProductID, ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice"& _ 
            ", UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued, CategoryName FROM dbo."& _ 
            "[Alphabetical list of products]"
        CType(Me.m_commandCollection(0),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.Text
    End Sub
    
    Public Overloads Overridable Function Fill(ByVal dataSet As Products) As Integer Implements IAlphabetical_list_of_productsTableAdapter.Fill
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.SqlClient.SqlCommand)
        If (Me.m_clearBeforeFill = true) Then
            dataSet.Alphabetical_list_of_products.Clear
        End If
        Dim returnValue As Integer = Me.Adapter.Fill(dataSet)
        Return returnValue
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
    Public Overloads Overridable Function Fill(ByVal dataTable As Products.Alphabetical_list_of_productsDataTable) As Integer Implements IAlphabetical_list_of_productsTableAdapter.Fill
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.SqlClient.SqlCommand)
        If (Me.m_clearBeforeFill = true) Then
            dataTable.Clear
        End If
        Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
        Return returnValue
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
    Public Overloads Overridable Function GetData() As Products.Alphabetical_list_of_productsDataTable Implements IAlphabetical_list_of_productsTableAdapter.GetData
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.SqlClient.SqlCommand)
        Dim dataTable As Products.Alphabetical_list_of_productsDataTable = New Products.Alphabetical_list_of_productsDataTable
        Me.Adapter.Fill(dataTable)
        Return dataTable
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataSet As Products) As Integer Implements IAlphabetical_list_of_productsTableAdapter.Update
        Return Me.Adapter.Update(dataSet, "Alphabetical list of products")
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataTable As Products.Alphabetical_list_of_productsDataTable) As Integer Implements IAlphabetical_list_of_productsTableAdapter.Update
        Return Me.Adapter.Update(dataTable)
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer Implements IAlphabetical_list_of_productsTableAdapter.Update
        Return Me.Adapter.Update(dataRows)
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer Implements IAlphabetical_list_of_productsTableAdapter.Update
        Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
    End Function
End Class
